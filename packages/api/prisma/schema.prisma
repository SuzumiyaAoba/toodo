generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Todo {
  id                String            @id @default(uuid())
  title             String
  description       String?
  status            String            @default("pending")
  workState         String            @default("idle")
  totalWorkTime     Int               @default(0)
  lastStateChangeAt DateTime          @default(now())
  dueDate           DateTime?         // Added due date field
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  priority          String            @default("medium") // Added priority field
  projectId         String?        // Reference to project
  activities        TodoActivity[]
  tags              TodoTag[]
  project           Project?       @relation(fields: [projectId], references: [id])
  
  dependsOn         TodoDependency[]  @relation("DependentTodo")
  dependents        TodoDependency[]  @relation("DependencyTodo")
  
  // Fields and relations for subtasks
  parentId          String?           // Parent task ID
  parent            Todo?             @relation("TodoHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  subtasks          Todo[]            @relation("TodoHierarchy")
}

model TodoActivity {
  id            String      @id @default(uuid())
  todoId        String
  type          String
  note          String?
  createdAt     DateTime    @default(now())
  previousState String?
  workTime      Int?
  todo          Todo        @relation(fields: [todoId], references: [id], onDelete: Cascade)
  workPeriodId  String?
  workPeriod    WorkPeriod? @relation(fields: [workPeriodId], references: [id], onDelete: SetNull)
}

model TodoDependency {
  dependentId   String
  dependencyId  String
  createdAt     DateTime @default(now())
  dependent     Todo     @relation("DependentTodo", fields: [dependentId], references: [id], onDelete: Cascade)
  dependency    Todo     @relation("DependencyTodo", fields: [dependencyId], references: [id], onDelete: Cascade)

  @@id([dependentId, dependencyId])
}

model Tag {
  id        String    @id @default(uuid())
  name      String    @unique
  color     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  todos     TodoTag[]
}

model TodoTag {
  todoId     String
  tagId      String
  assignedAt DateTime @default(now())
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  todo       Todo     @relation(fields: [todoId], references: [id], onDelete: Cascade)

  @@id([todoId, tagId])
}

model Project {
  id          String   @id @default(uuid())
  name        String
  description String?
  color       String?
  status      String   @default("active")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  todos       Todo[]
}

model WorkPeriod {
  id          String         @id @default(uuid())
  name        String
  date        DateTime       @default(now())
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  activities  TodoActivity[]
}
