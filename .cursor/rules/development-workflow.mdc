---
description: 
globs: 
alwaysApply: true
---
# System Development Workflow

## Development Flow

The following workflow **MUST** be followed:

1. **Domain Design (DDD)**
   - Identify and define domain models
   - Establish common language
   - Define bounded contexts
   - Identify aggregates and entities

2. **Endpoint Design**
   - Define RESTful APIs
   - Design request/response structures
   - Define error handling strategies
   - Specify authentication/authorization requirements

3. **Database Design**
   - Define table structures
   - Define relationships
   - Design indexes
   - Establish migration strategies

4. **Module Design**
   - Design classes/components
   - Organize dependencies
   - Define interfaces
   - Define architecture

5. **Design Verification**
   - Verify design documentation exists for the feature
   - Return to design phase if documentation is insufficient

6. **TDD Implementation**
   - Create tests for smallest functional units
   - Verify tests fail initially
   - Develop implementation
   - Iterate until tests pass

7. **Iteration and Progress**
   - Move to next method only after current tests pass
   - Revisit design as needed

## Mandatory Checklists

### Domain Design Checklist
- [ ] Domain models clearly defined
- [ ] Common language documented
- [ ] Bounded contexts appropriately separated
- [ ] Aggregate boundaries clear

### Endpoint Design Checklist
- [ ] All necessary endpoints defined
- [ ] Request/response structures appropriate
- [ ] Error handling consistent
- [ ] Security requirements considered

### Database Design Checklist
- [ ] Schema normalized
- [ ] Indexes appropriately set
- [ ] Migration strategy defined
- [ ] Performance requirements considered

### Test Implementation Checklist
- [ ] Tests accurately reflect requirements
- [ ] Edge cases covered
- [ ] Tests independent and reproducible
- [ ] Test code readable and maintainable

## Required Practices
- Keep design documentation up-to-date
- Review design before implementation
- Maintain TDD cycles for all functional units
- Verify design consistency during code reviews
- Perform regular refactoring to reduce technical debt
