---
description: 
globs: 
alwaysApply: true
---
# Toodo Project Guidelines

## Basic Rules
- Use English for code, comments, and documentation
- Follow the project structure and coding conventions
- Apply Domain-Driven Design (DDD) principles
- Practice Test-Driven Development (TDD)

## Tech Stack
- [Bun](mdc:https:/bun.sh) - JavaScript runtime and package manager
- [Hono](mdc:https:/hono.dev) - Fast, lightweight web framework
- [SQLite](mdc:https:/www.sqlite.org) - Database (via Bun SQLite)
- [Drizzle ORM](mdc:https:/orm.drizzle.team) - TypeScript ORM for database operations
- [tslog](mdc:https:/tslog.js.org) - Logging library
- [UUID](mdc:https:/www.npmjs.com/package/uuid) - For generating unique IDs

## Code Style
- Use [Biome](mdc:https:/biomejs.dev) for linting and formatting
- 2 spaces for indentation
- Maximum line length: 120 characters
- Run `bun run format` to format code before committing

## Project Structure
- `src/index.ts` - Main application entry point
- `src/db/` - Database related files
  - `schema.ts` - Database schema definitions
  - `migrations/` - Database migrations
  - `migrate.ts` - Migration script

## API Structure
- REST API with the following endpoints:
  - `GET /api/todos` - Get all todos
  - `POST /api/todos` - Create a new todo
  - `PATCH /api/todos/:id` - Update a todo
  - `DELETE /api/todos/:id` - Delete a todo

## Workflow
- Use `bun run dev` for development with hot reloading
- Run tests with `bun run test`
- Database migrations with `bun run migrate`
- Use Drizzle Studio with `bun run studio` for database management

## Development Approach

### Domain-Driven Design (DDD)
- Focus on the core domain and domain logic
- Base complex designs on a model of the domain
- Collaborate with domain experts to improve the application model
- Establish a common ubiquitous language between developers and domain experts
- Structure code around domain concepts:
  - Entities: Objects with identity and lifecycle
  - Value Objects: Immutable objects with no identity
  - Aggregates: Clusters of entities and value objects
  - Repositories: Collection-like interfaces for accessing domain objects
  - Services: Domain operations that don't fit within entities

### Test-Driven Development (TDD)
- Write tests before implementation (Red-Green-Refactor cycle)
- Start with failing tests (Red)
- Implement minimal code to make tests pass (Green)
- Refactor code while maintaining test integrity (Refactor)
- Use tests to document expected behavior
- Ensure high test coverage for all domain logic
- Run tests with `bun run test` before commits

## Git Commit Guidelines
- All commit messages must follow [Conventional Commit](mdc:https:/www.conventionalcommits.org/ja/v1.0.0) specification
- Format: `<type>[optional scope]: <description>`
- Common types:
  - `feat`: A new feature
  - `fix`: A bug fix
  - `docs`: Documentation only changes
  - `style`: Changes that do not affect the meaning of the code
  - `refactor`: A code change that neither fixes a bug nor adds a feature
  - `test`: Adding missing tests or correcting existing tests
  - `chore`: Changes to the build process or auxiliary tools
- Examples:
  - `feat: add todo filtering functionality`
  - `fix: resolve issue with todo deletion`
  - `docs: update API documentation`