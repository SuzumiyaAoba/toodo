---
description: 
globs: 
alwaysApply: false
---
# Pull Request Creation Procedure Using GitHub CLI

## Step-by-Step Workflow

1. Create and switch to a working branch
   ```bash
   # Use a descriptive branch name following conventions
   # Pattern: <type>/<description>
   # Examples: feature/user-authentication, fix/login-issue, docs/api-documentation
   git checkout -b feature/new-feature
   ```

2. Make changes and commit
   ```bash
   # Stage specific files
   git add <file1> <file2>
   
   # Or stage all changes
   git add .
   
   # Commit with conventional commit format
   # Pattern: <type>[optional scope]: <description>
   # Examples: feat: add user registration, fix(auth): resolve login timeout
   git commit -m "feat: add new feature"
   ```

3. Push the branch to remote
   ```bash
   git push -u origin feature/new-feature
   ```

4. Create a pull request
   ```bash
   # Basic command (interactive mode)
   gh pr create
   
   # Full command with options (recommended)
   echo "{Fill @PULL_REQUEST_TEMPLATE.md in one line}" | gh pr create --title "{Pull Request Title}" --base master --body-file -
   ```

## Additional Options and Commands

### Commonly Used PR Creation Options

- `--title`, `-t`: Specify the PR title
- `--body`, `-b`: Specify the PR description
- `--base`: Target branch for merging (default: repository's default branch)
- `--draft`: Create as a draft PR
- `--assignee`, `-a`: Assign to specific users
- `--reviewer`, `-r`: Request reviews from specific users or teams
- `--label`, `-l`: Add labels to the PR

### Example with Multiple Options

```bash
gh pr create \
  --title "feat: implement user authentication" \
  --body "Adds JWT-based authentication system for users" \
  --base develop \
  --reviewer username1,username2 \
  --assignee myusername \
  --label enhancement \
  --draft
```

### Managing Pull Requests

- List open pull requests
  ```bash
  gh pr list
  ```

- View PR details
  ```bash
  gh pr view <PR-number>
  # Or view in web browser
  gh pr view <PR-number> --web
  ```

- Check out a PR locally
  ```bash
  gh pr checkout <PR-number>
  ```

- Merge a PR
  ```bash
  gh pr merge <PR-number>
  # Options: --merge, --squash, --rebase
  gh pr merge <PR-number> --squash
  ```

- Update PR description after pushing changes
  ```bash
  # Create or update a file with the new PR description
  # Option 1: Edit existing description
  gh pr view <PR-number> --json body -q .body > pr_body.md
  # Edit pr_body.md file with new changes
  cat pr_body.md | gh pr edit <PR-number> --body-file -
  
  # Option 2: Create a new description based on template
  cat .github/PULL_REQUEST_TEMPLATE.md > pr_body.md
  # Edit pr_body.md file
  cat pr_body.md | gh pr edit <PR-number> --body-file -
  ```

### Updating PR Description After Changes

When making additional changes to a PR, it's important to keep the PR description in sync with the actual code changes:

1. **Minor Changes**: For small changes that don't affect the overall scope:
   - Add a note in the "Additional context" section about the update
   - No need to completely rewrite the description

2. **Significant Changes**: For changes that alter the PR's scope or purpose:
   - Update the main "Description" section to reflect the new purpose
   - Revise the "Type of change" checkboxes if the change type has shifted
   - Update the "How Has This Been Tested" section with new test information
   - Review and update all checklist items

3. **Response to Review Comments**: When changes are made based on reviews:
   - Consider adding a summary of changes made in response to reviews
   - Reference specific review comments when describing changes

Always use the `gh pr edit` command to update the PR description after pushing significant changes:

```bash
# Edit the title if the scope has changed
gh pr edit <PR-number> --title "Updated title reflecting new changes"

# Update the PR body with a file containing the revised description
cat updated_pr_body.md | gh pr edit <PR-number> --body-file -
```

### Tips for Effective PRs

- Keep PRs small and focused on a single change
- Include clear descriptions of changes and reasoning
- Reference related issues using keywords (Fixes #123, Relates to #456)
- Ensure tests pass before requesting review
- Respond promptly to review comments and requested changes
- Always write PR titles and descriptions in English, regardless of the primary language used in the project

