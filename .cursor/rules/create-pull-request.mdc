---
description: How to create Pull Request
globs: 
alwaysApply: false
---
# GitHub CLI Pull Request Creation and Management Guide

## Step-by-Step Workflow

1. Create and switch to a working branch
   ```bash
   # Use descriptive branch names following conventions
   # Pattern: <type>/<description>
   # Examples: feature/user-authentication, fix/login-issue, docs/api-documentation
   git checkout -b feature/new-feature
   ```

2. Make changes and commit
   ```bash
   # Stage specific files
   git add <file1> <file2>
   
   # Or stage all changes
   git add .
   
   # Commit with conventional format
   # Pattern: <type>[optional scope]: <description>
   # Examples: feat: add user registration, fix(auth): resolve login timeout
   git commit -m "feat: add new feature"
   ```

3. Push branch to remote
   ```bash
   git push -u origin feature/new-feature
   ```

4. Create pull request
   ```bash
   # Basic command (interactive)
   gh pr create
   
   # Recommended command with options
   echo -e "{{PULL_REQUEST_BODY}}" | gh pr create --title "Descriptive PR Title" --base main --body-file -
   ```

   - Format `{{PULL_REQUEST_BODY}}` as a single line
   - Follow the structure in [PULL_REQUEST_TEMPLATE.md](mdc:.github/PULL_REQUEST_TEMPLATE.md)

5. Update pull request after creation
   ```bash
   # Make additional changes
   git add <changed_files>
   git commit -m "type: description of changes"
   
   # Push updates to same branch
   git push
   
   # PR updates automatically with new commits
   ```

6. Update PR title or description
   ```bash
   # Update title
   gh pr edit <PR-number> --title "Updated Title"
   
   # Update description
   gh pr edit <PR-number> --body "Updated Description"
   
   # Update both
   gh pr edit <PR-number> --title "Updated Title" --body "Updated Description"
   ```

7. Respond to review feedback
   ```bash
   # After making requested changes
   git add <files>
   git commit -m "fix: address review feedback on X feature"
   git push
   
   # Optionally add PR comments
   gh pr comment <PR-number> --body "I've addressed feedback by refactoring the authentication logic as suggested."
   ```

## Essential Guidelines

- **Language**: Write all PR titles and descriptions in English
- **Template**: Follow PULL_REQUEST_TEMPLATE.md structure
- **Clarity**: Clearly communicate purpose, scope, and impact of changes
- **Updates**: Include context about changes when addressing feedback
- **Size**: Keep PRs reasonably sized (under 400 lines) for effective reviews

## Advanced Options and Commands

### Essential PR Creation Options

- `--title`, `-t`: PR title
- `--body`, `-b`: PR description
- `--base`: Target branch for merging
- `--draft`: Submit as draft PR
- `--assignee`, `-a`: Assign to team members
- `--reviewer`, `-r`: Request reviews
- `--label`, `-l`: Categorize with labels

### Comprehensive Example

```bash
gh pr create \
  --title "feat: implement JWT-based user authentication" \
  --body "Adds secure authentication system with role-based access control" \
  --base develop \
  --reviewer tech-lead,security-team \
  --assignee your-username \
  --label enhancement,security \
  --draft
```

### PR Management Commands

- List open pull requests
  ```bash
  LESS=FRX gh pr list
  ```

- View PR details
  ```bash
  LESS=FRX gh pr view <PR-number>
  # Or in browser
  LESS=FRX gh pr view <PR-number> --web
  ```

- Check out PR locally
  ```bash
  gh pr checkout <PR-number>
  ```

- Merge PR
  ```bash
  gh pr merge <PR-number>
  # Strategies: --merge, --squash, --rebase
  gh pr merge <PR-number> --squash
  ```
  
- Check PR status
  ```bash
  gh pr status
  # Shows your PRs and review requests
  ```

- Manage reviewers
  ```bash
  gh pr edit <PR-number> --add-reviewer username1,username2
  gh pr edit <PR-number> --remove-reviewer username1
  ```

- Mark draft PR as ready
  ```bash
  gh pr ready <PR-number>
  ```

### Best Practices

- Focus each PR on a single logical change
- Provide comprehensive descriptions
- Reference related issues (Fixes #123, Addresses #456)
- Ensure tests pass and CI checks succeed before requesting review
- Respond promptly to feedback
- Use suggestion feature for review comments when applicable
- Use draft PRs for work-in-progress changes
- Add screenshots for UI changes

## Troubleshooting

### GitHub CLI Issues

If you encounter issues:

1. Verify installation and version
   ```bash
   gh --version
   ```

2. Check authentication
   ```bash
   gh auth status
   ```

3. Re-authenticate if needed
   ```bash
   gh auth login
   ```

### Alternative Methods

If GitHub CLI is unavailable:

1. Create PR through web interface:
   - Push branch: `git push -u origin your-branch-name`
   - Visit repository on GitHub
   - Click "Compare & pull request"
   - Fill in details according to guidelines
   - Submit PR

2. Update existing PR without CLI:
   - Make changes to code
   - Commit and push to same branch
   - PR updates automatically
   - Visit PR on GitHub to update title/description manually
